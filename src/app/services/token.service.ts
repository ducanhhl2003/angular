// import { Injectable } from '@angular/core';
// import { JwtHelperService } from '@auth0/angular-jwt';
// @Injectable({
//     providedIn: 'root'
// })
// export class TokenService {
//     private readonly TOKEN_KEY = 'access_token';
//     private jwtHelperService = new JwtHelperService();
//     constructor() { }
//     getToken(): string | null {
//         return localStorage.getItem(this.TOKEN_KEY);
//     }
//     setToken(token: string): void {
//         localStorage.setItem(this.TOKEN_KEY, token);
//     }
//     getUserId(): number {
//         let userObject = this.jwtHelperService.decodeToken(this.getToken() ?? '');
//         return 'id' in userObject ? parseInt(userObject['id']) : 0;
//     }
//     removeToken(): void {
//         localStorage.removeItem(this.TOKEN_KEY);
//     }
//     isTokenExpired(): boolean {
//         const token = this.getToken();
//         return !token || this.jwtHelperService.isTokenExpired(token);
//     }

// }
import { Injectable } from '@angular/core';
import { JwtHelperService } from '@auth0/angular-jwt';

@Injectable({
    providedIn: 'root'
})
export class TokenService {
    private readonly TOKEN_KEY = 'access_token';
    private jwtHelperService = new JwtHelperService();

    constructor() { }

    /** L·∫•y token t·ª´ localStorage */
    getToken(): string | null {
        return localStorage.getItem(this.TOKEN_KEY);
    }

    /** L∆∞u token v√†o localStorage */
    setToken(token: string): void {
        localStorage.setItem(this.TOKEN_KEY, token);
    }

    /** X√≥a token kh·ªèi localStorage */
    removeToken(): void {
        localStorage.removeItem(this.TOKEN_KEY);
    }

    /** Ki·ªÉm tra token c√≥ h·∫øt h·∫°n kh√¥ng */
    isTokenExpired(): boolean {
        const token = this.getToken();
        return !token || this.jwtHelperService.isTokenExpired(token);
    }

    /** L·∫•y userId t·ª´ token ho·∫∑c localStorage */
    getUserId(): number {
        const token = this.getToken();

        // üî• Ki·ªÉm tra xem token c√≥ t·ªìn t·∫°i kh√¥ng
        if (!token) {
            console.warn('‚ùå Kh√¥ng t√¨m th·∫•y token trong localStorage');
            return this.getUserIdFromLocalStorage(); // N·∫øu kh√¥ng c√≥ token, l·∫•y t·ª´ localStorage
        }

        try {
            const decodedToken = this.jwtHelperService.decodeToken(token);
            console.log('‚úÖ Token ƒë√£ gi·∫£i m√£:', decodedToken);

            // üî• L·∫•y userId t·ª´ token, ki·ªÉm tra c·∫£ 'id' v√† 'userId'
            return decodedToken?.id ?? decodedToken?.userId ?? this.getUserIdFromLocalStorage();
        } catch (error) {
            console.error('‚ùå L·ªói gi·∫£i m√£ token:', error);
            return this.getUserIdFromLocalStorage();
        }
    }

    /** L·∫•y userId t·ª´ localStorage n·∫øu token kh√¥ng c√≥ */
    private getUserIdFromLocalStorage(): number {
        const userJson = localStorage.getItem('user');
        if (!userJson) {
            console.warn('‚ùå Kh√¥ng t√¨m th·∫•y user trong localStorage');
            return 0;
        }

        try {
            const userObject = JSON.parse(userJson);
            console.log('‚úÖ D·ªØ li·ªáu user:', userObject);
            return userObject?.id ?? 0;
        } catch (error) {
            console.error('‚ùå L·ªói parse user:', error);
            return 0;
        }
    }
}
